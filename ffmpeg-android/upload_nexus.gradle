apply plugin: 'maven'

def getVersion() {
    return hasProperty('VERSION_SUFFIX') ?
            android.defaultConfig.versionName + '-' + VERSION_SUFFIX :
            android.defaultConfig.versionName
}

def isReleaseBuild() {
    return !getVersion().toUpperCase().contains("SNAPSHOT")
}

static def getRepositoryUsername() {
    return System.getenv('NEXUS_USERNAME')
}

static def getRepositoryPassword() {
    return System.getenv('NEXUS_PASSWORD')
}

def getRepositoryUrl() {
    return isReleaseBuild() ? RELEASE_REPOSITORY_URL : SNAPSHOT_REPOSITORY_URL
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = getVersion()
                repository(url: getRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
            }
        }
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        excludes = ['**/*.kt']
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }
    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
        enabled = false
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}